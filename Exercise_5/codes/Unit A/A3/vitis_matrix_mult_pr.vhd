-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mult_pr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    A_0_ce0 : OUT STD_LOGIC;
    A_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    A_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    A_0_ce1 : OUT STD_LOGIC;
    A_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    A_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    A_1_ce0 : OUT STD_LOGIC;
    A_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    A_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    A_1_ce1 : OUT STD_LOGIC;
    A_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    A_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    A_2_ce0 : OUT STD_LOGIC;
    A_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    A_2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    A_2_ce1 : OUT STD_LOGIC;
    A_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    B_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    B_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    B_0_ce1 : OUT STD_LOGIC;
    B_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    B_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    B_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    B_1_ce1 : OUT STD_LOGIC;
    B_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    B_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    B_2_ce0 : OUT STD_LOGIC;
    B_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    B_2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    B_2_ce1 : OUT STD_LOGIC;
    B_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    C_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    C_0_ce0 : OUT STD_LOGIC;
    C_0_we0 : OUT STD_LOGIC;
    C_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    C_0_ce1 : OUT STD_LOGIC;
    C_0_we1 : OUT STD_LOGIC;
    C_0_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    C_1_ce0 : OUT STD_LOGIC;
    C_1_we0 : OUT STD_LOGIC;
    C_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    C_1_ce1 : OUT STD_LOGIC;
    C_1_we1 : OUT STD_LOGIC;
    C_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    C_2_ce0 : OUT STD_LOGIC;
    C_2_we0 : OUT STD_LOGIC;
    C_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    C_2_ce1 : OUT STD_LOGIC;
    C_2_we1 : OUT STD_LOGIC;
    C_2_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrix_mult_pr is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_mult_pr_matrix_mult_pr,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.630000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3,HLS_SYN_LUT=341,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln19_fu_386_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln19_2_fu_494_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln19_3_fu_413_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln19_5_fu_548_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln19_6_fu_440_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln19_8_fu_602_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_fu_364_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_fu_372_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_fu_380_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_3_fu_391_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_3_fu_399_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_3_fu_407_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_6_fu_418_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_6_fu_426_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_6_fu_434_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_1_fu_445_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_1_fu_453_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_1_fu_461_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_2_fu_472_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_2_fu_480_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_2_fu_488_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_4_fu_499_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_4_fu_507_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_4_fu_515_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_5_fu_526_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_5_fu_534_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_5_fu_542_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_7_fu_553_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_7_fu_561_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_7_fu_569_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_8_fu_580_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_8_fu_588_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_8_fu_596_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component matrix_mult_pr_mul_5s_5s_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    mul_5s_5s_10_1_1_U1 : component matrix_mult_pr_mul_5s_5s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => rhs_fu_372_p1,
        din1 => lhs_fu_364_p1,
        dout => ret_fu_380_p2);

    mul_5s_5s_10_1_1_U2 : component matrix_mult_pr_mul_5s_5s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => rhs_3_fu_399_p1,
        din1 => lhs_3_fu_391_p1,
        dout => ret_3_fu_407_p2);

    mul_5s_5s_10_1_1_U3 : component matrix_mult_pr_mul_5s_5s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => rhs_6_fu_426_p1,
        din1 => lhs_6_fu_418_p1,
        dout => ret_6_fu_434_p2);

    mul_5s_5s_10_1_1_U4 : component matrix_mult_pr_mul_5s_5s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => rhs_1_fu_453_p1,
        din1 => lhs_1_fu_445_p1,
        dout => ret_1_fu_461_p2);

    mul_5s_5s_10_1_1_U5 : component matrix_mult_pr_mul_5s_5s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => rhs_2_fu_480_p1,
        din1 => lhs_2_fu_472_p1,
        dout => ret_2_fu_488_p2);

    mul_5s_5s_10_1_1_U6 : component matrix_mult_pr_mul_5s_5s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => rhs_4_fu_507_p1,
        din1 => lhs_4_fu_499_p1,
        dout => ret_4_fu_515_p2);

    mul_5s_5s_10_1_1_U7 : component matrix_mult_pr_mul_5s_5s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => rhs_5_fu_534_p1,
        din1 => lhs_5_fu_526_p1,
        dout => ret_5_fu_542_p2);

    mul_5s_5s_10_1_1_U8 : component matrix_mult_pr_mul_5s_5s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => rhs_7_fu_561_p1,
        din1 => lhs_7_fu_553_p1,
        dout => ret_7_fu_569_p2);

    mul_5s_5s_10_1_1_U9 : component matrix_mult_pr_mul_5s_5s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => rhs_8_fu_588_p1,
        din1 => lhs_8_fu_580_p1,
        dout => ret_8_fu_596_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    A_0_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_0_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            A_0_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            A_0_address0 <= "XX";
        end if; 
    end process;

    A_0_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    A_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            A_0_ce0 <= ap_const_logic_1;
        else 
            A_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_0_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_0_ce1 <= ap_const_logic_1;
        else 
            A_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_1_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            A_1_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            A_1_address0 <= "XX";
        end if; 
    end process;

    A_1_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    A_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            A_1_ce0 <= ap_const_logic_1;
        else 
            A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_1_ce1 <= ap_const_logic_1;
        else 
            A_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_2_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            A_2_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            A_2_address0 <= "XX";
        end if; 
    end process;

    A_2_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    A_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            A_2_ce0 <= ap_const_logic_1;
        else 
            A_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_2_ce1 <= ap_const_logic_1;
        else 
            A_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_0_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_0_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            B_0_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            B_0_address0 <= "XX";
        end if; 
    end process;

    B_0_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    B_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            B_0_ce0 <= ap_const_logic_1;
        else 
            B_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_0_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_0_ce1 <= ap_const_logic_1;
        else 
            B_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_1_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_1_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            B_1_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            B_1_address0 <= "XX";
        end if; 
    end process;

    B_1_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    B_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            B_1_ce0 <= ap_const_logic_1;
        else 
            B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_1_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_1_ce1 <= ap_const_logic_1;
        else 
            B_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_2_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_2_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            B_2_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            B_2_address0 <= "XX";
        end if; 
    end process;

    B_2_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    B_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            B_2_ce0 <= ap_const_logic_1;
        else 
            B_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_2_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_2_ce1 <= ap_const_logic_1;
        else 
            B_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    C_0_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_0_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            C_0_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            C_0_address0 <= "XX";
        end if; 
    end process;

    C_0_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    C_0_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            C_0_ce0 <= ap_const_logic_1;
        else 
            C_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_0_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_0_ce1 <= ap_const_logic_1;
        else 
            C_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    C_0_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln19_fu_386_p1, zext_ln19_2_fu_494_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_0_d0 <= zext_ln19_2_fu_494_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            C_0_d0 <= zext_ln19_fu_386_p1;
        else 
            C_0_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    C_0_d1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_1_fu_461_p2),16));

    C_0_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            C_0_we0 <= ap_const_logic_1;
        else 
            C_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_0_we1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_0_we1 <= ap_const_logic_1;
        else 
            C_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    C_1_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_1_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            C_1_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            C_1_address0 <= "XX";
        end if; 
    end process;

    C_1_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    C_1_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            C_1_ce0 <= ap_const_logic_1;
        else 
            C_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_1_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_1_ce1 <= ap_const_logic_1;
        else 
            C_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    C_1_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln19_3_fu_413_p1, zext_ln19_5_fu_548_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_1_d0 <= zext_ln19_5_fu_548_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            C_1_d0 <= zext_ln19_3_fu_413_p1;
        else 
            C_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    C_1_d1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_4_fu_515_p2),16));

    C_1_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            C_1_we0 <= ap_const_logic_1;
        else 
            C_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_1_we1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_1_we1 <= ap_const_logic_1;
        else 
            C_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    C_2_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_2_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            C_2_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            C_2_address0 <= "XX";
        end if; 
    end process;

    C_2_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    C_2_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            C_2_ce0 <= ap_const_logic_1;
        else 
            C_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_2_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_2_ce1 <= ap_const_logic_1;
        else 
            C_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    C_2_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln19_6_fu_440_p1, zext_ln19_8_fu_602_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_2_d0 <= zext_ln19_8_fu_602_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            C_2_d0 <= zext_ln19_6_fu_440_p1;
        else 
            C_2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    C_2_d1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_7_fu_569_p2),16));

    C_2_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            C_2_we0 <= ap_const_logic_1;
        else 
            C_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_2_we1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_2_we1 <= ap_const_logic_1;
        else 
            C_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    lhs_1_fu_445_p1 <= A_0_q1(5 - 1 downto 0);
    lhs_2_fu_472_p1 <= A_0_q0(5 - 1 downto 0);
    lhs_3_fu_391_p1 <= A_1_q0(5 - 1 downto 0);
    lhs_4_fu_499_p1 <= A_1_q1(5 - 1 downto 0);
    lhs_5_fu_526_p1 <= A_1_q0(5 - 1 downto 0);
    lhs_6_fu_418_p1 <= A_2_q0(5 - 1 downto 0);
    lhs_7_fu_553_p1 <= A_2_q1(5 - 1 downto 0);
    lhs_8_fu_580_p1 <= A_2_q0(5 - 1 downto 0);
    lhs_fu_364_p1 <= A_0_q0(5 - 1 downto 0);
    rhs_1_fu_453_p1 <= B_0_q1(5 - 1 downto 0);
    rhs_2_fu_480_p1 <= B_0_q0(5 - 1 downto 0);
    rhs_3_fu_399_p1 <= B_1_q0(5 - 1 downto 0);
    rhs_4_fu_507_p1 <= B_1_q1(5 - 1 downto 0);
    rhs_5_fu_534_p1 <= B_1_q0(5 - 1 downto 0);
    rhs_6_fu_426_p1 <= B_2_q0(5 - 1 downto 0);
    rhs_7_fu_561_p1 <= B_2_q1(5 - 1 downto 0);
    rhs_8_fu_588_p1 <= B_2_q0(5 - 1 downto 0);
    rhs_fu_372_p1 <= B_0_q0(5 - 1 downto 0);
    zext_ln19_2_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_2_fu_488_p2),16));
    zext_ln19_3_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_3_fu_407_p2),16));
    zext_ln19_5_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_5_fu_542_p2),16));
    zext_ln19_6_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_6_fu_434_p2),16));
    zext_ln19_8_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_8_fu_596_p2),16));
    zext_ln19_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_fu_380_p2),16));
end behav;
